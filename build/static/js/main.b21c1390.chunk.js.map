{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","cambioRicerca","pending","filtraRobot","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","isPending","dispatch","event","payload","target","value","fetch","then","res","json","catch","Boolean","window","location","hostname","match","initialState","initialStateRobots","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.b21c1390.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n     <> \r\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> \r\n        <img alt='robot' src={`https://robohash.org/${id}?size=200x200`}/>\r\n       <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n       </div>\r\n      </div>\r\n     </>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return(\r\n        <>\r\n        {\r\n        robots.map((user, i) => {\r\n         return (\r\n            <Card \r\n              key={i} \r\n              id={robots[i].id} \r\n              name={robots[i].name} \r\n              email={robots[i].email}\r\n            />\r\n          ); \r\n        })\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <>\r\n            <div className=\"pa2\">\r\n                <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"Busca robots\" onChange={searchChange} />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '5px solid #0ccac4', height: '500px' }}>\r\n        {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState ({ hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Oooops. C'Ã¨ qualcosa che non va!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        pending: state.requestRobots.isPending\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {      //dispatch = trigger azione dopo evento\r\n    return {\r\n        cambioRicerca: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchField, cambioRicerca, pending } = this.props;\r\n        const filtraRobot = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return (\r\n            <>\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\"> RoboFriends </h1>\r\n                    <SearchBox searchChange={cambioRicerca} />\r\n                    <Scroll>\r\n                        {pending ? <h1>Loading</h1> :\r\n                            <ErrorBoundary>\r\n                                <CardList robots={filtraRobot} />\r\n                            </ErrorBoundary>\r\n                        }\r\n                    </Scroll>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\n\r\n\r\n//Actions\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => res.json())\r\n        .then(robots => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: robots }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\n\r\nconst initialState = {\r\n    searchField: ''\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\n//Reducers\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })    //crea uno state nuovo con le modifiche - valido anche cosi: return { ...state, searchField: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst logger = createLogger();\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}